#include "imports/stdlib.fc";

(slice, int) begin_parse_exotic(cell c) asm "XCTOS";

() save_data(slice owner, int counter) impure {
    set_data(
        begin_cell()
        .store_slice(owner)
        .store_uint(counter, 64)
        .end_cell()
    );
}

(slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_uint(64)
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    int op = in_msg_body~load_uint(32);

    (slice owner, int counter) = load_data();

    if (op == 1) {
        slice recipient_address = in_msg_body~load_msg_addr();
        save_data(owner, counter + 1);

        builder msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(recipient_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(2, 32);

        send_raw_message(msg.end_cell(), 64);

        return ();
    }

    if (op == 2) {
        save_data(owner, counter + 1);

        throw(333);

        return ();
    }

    if (op == 3) {
        int index = in_msg_body~load_uint(256);
        int merkle_root = in_msg_body~load_uint(256);
        cell merkle_proof = in_msg_body~load_ref();
        (slice cs, int exotic?) = merkle_proof.begin_parse_exotic();
        throw_unless(42, exotic?);

        throw_unless(43, cs~load_uint(8) == 3);
        throw_unless(44, merkle_root == cs~load_uint(256));

        cell dict = cs~load_ref();
        (slice entry, int found?) = dict.udict_get?(256, index);
        throw_unless(45, found?);
    }

    if (op == 0xffffffff) {
        int op = in_msg_body~load_uint(32);
        ~dump(op);

        ;; save_data(owner, counter - 1);   
    }
}

(slice, int) get_storage_data() method_id {
    return load_data();
}

int balance() method_id {
    [int balance, _] = get_balance();
    return balance;
}
