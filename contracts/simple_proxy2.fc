#include "imports/stdlib.fc";

slice parse_sender_address(cell in_msg_full) inline {
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4); ;; flags
    return cs~load_msg_addr();
}

(slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr());
}

() save_data(slice manager_address, slice memorized_address) impure {
    set_data(
        begin_cell()
        .store_slice(manager_address)
        .store_slice(memorized_address)
        .end_cell()
    );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice sender_address = in_msg_full.parse_sender_address();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 1) {
        slice new_address = in_msg_body~load_msg_addr();
        (slice manager_address, _) = load_data();
        throw_unless(1001, equal_slices(sender_address, manager_address));
        save_data(manager_address, new_address);
    } elseif (op == 2) {
        (slice manager_address, slice memorized_address) = load_data();

        cell body = begin_cell()
            .store_uint(3, 32) ;; op
            .store_uint(query_id, 64) ;; query_id
            .store_slice(manager_address) ;; manager_address
            .store_slice(memorized_address) ;; memorized_address
            .end_cell();

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            ;; .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(3, 32) ;; op
            .store_uint(query_id, 64) ;; query_id
            .store_slice(manager_address) ;; manager_address
            .store_slice(memorized_address) ;; memorized_address
            ;; .store_ref(body)
            .end_cell();

        send_raw_message(msg, 64);
    } else {
        throw(3);
    }
}

(slice, slice) get_storage_data() method_id {
    return load_data();
}